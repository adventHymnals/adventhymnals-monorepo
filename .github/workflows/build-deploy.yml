name: Build and Deploy

on:
  push:
    branches: [master, main]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'turbo.json'
  workflow_dispatch:
    inputs:
      deploy_server:
        description: 'Deploy to server'
        required: false
        default: 'true'
        type: boolean
      deploy_pages:
        description: 'Deploy to GitHub Pages'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: adventhymnals/advent-hymnals-web
  NODE_ENV: production

permissions:
  contents: read
  packages: write
  id-token: write
  pages: write

concurrency:
  group: "build-deploy-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  # Docker Build Path
  build-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.deploy_server == 'true')
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install turbo globally
        run: npm install -g turbo

      - name: Build packages
        run: pnpm turbo build --filter=@advent-hymnals/web^...

      - name: Build for Docker deployment
        run: |
          cd apps/web
          rm -rf .next
          pnpm build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_GA_ID: ${{ secrets.NEXT_PUBLIC_GA_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile.optimized
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
          platforms: linux/amd64

  # Static Build Path (Independent)
  build-static:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.deploy_pages == 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install turbo globally
        run: npm install -g turbo

      - name: Build packages
        run: pnpm turbo build --filter=@advent-hymnals/web^...

      - name: Build static export
        run: |
          cd apps/web
          # Clean previous builds and output directory
          rm -rf .next out .turbo
          
          # Build with static export configuration
          pnpm build
          
          # Clean out directory again before export to prevent EEXIST errors
          rm -rf out
          
          # Export with retry logic for EEXIST errors
          echo "üöÄ Attempting static export (known to have issues with dynamic API routes)"
          for i in {1..3}; do
            if pnpm export; then
              echo "‚úÖ Static export completed successfully"
              break
            else
              echo "‚ö†Ô∏è Static export failed (attempt $i/3), cleaning and retrying..."
              rm -rf out
              sleep 2
              if [ $i -eq 3 ]; then
                echo "‚ùå Static export failed after 3 attempts"
                echo "‚ÑπÔ∏è  This is a known issue with dynamic API routes in Next.js static export"
                echo "‚ÑπÔ∏è  Docker deployment will continue and is the primary deployment method"
                echo "‚ÑπÔ∏è  Consider using Docker deployment instead of static export"
                # Don't exit with error - let the workflow continue
                exit 0
              fi
            fi
          done
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_GA_ID: ${{ secrets.NEXT_PUBLIC_GA_ID }}

      - name: Upload static artifacts
        uses: actions/upload-artifact@v4
        with:
          name: static-site
          path: apps/web/out/
          retention-days: 1
          if-no-files-found: warn

  # Deploy to Production Server
  deploy-server:
    needs: build-docker
    runs-on: ubuntu-latest
    if: needs.build-docker.result == 'success'
    environment: production
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            cd /opt/advent-hymnals
            
            echo "üöÄ Starting deployment of Advent Hymnals..."
            echo "üì¶ Web Image: ${{ needs.build-docker.outputs.image-tags }}"
            
            # Update .env file with secrets
            cat > .env << EOF
            SITE_URL=https://adventhymnals.org
            NEXT_PUBLIC_SITE_URL=https://adventhymnals.org
            NODE_ENV=production
            NEXT_PUBLIC_GA_ID=${{ secrets.NEXT_PUBLIC_GA_ID }}
            GOOGLE_VERIFICATION=${{ secrets.GOOGLE_VERIFICATION }}
            YANDEX_VERIFICATION=${{ secrets.YANDEX_VERIFICATION }}
            EOF
            
            # Create external network if it doesn't exist
            if ! docker network ls | grep -q web-network; then
              echo "üåê Creating external Docker network..."
              docker network create web-network
            fi
            
            echo "üì¶ Pulling Docker images..."
            docker pull ${{ needs.build-docker.outputs.image-tags }}
            
            echo "üõë Stopping existing containers..."
            docker compose down || true
            
            echo "üöÄ Starting new containers..."
            export ADVENT_HYMNALS_IMAGE="${{ needs.build-docker.outputs.image-tags }}"
            docker compose up -d
            
            sleep 15
            echo "‚úÖ Deployment completed successfully!"

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            cd /opt/advent-hymnals
            
            echo "üîç Performing post-deployment verification..."
            docker compose ps
            
            RUNNING_CONTAINERS=$(docker compose ps --services --filter "status=running" | wc -l)
            
            if [ "$RUNNING_CONTAINERS" -gt 0 ]; then
              echo "‚úÖ Found $RUNNING_CONTAINERS running container(s)"
              
              if curl -sf http://localhost/api/health > /dev/null 2>&1; then
                echo "‚úÖ Web application health check passed"
              else
                echo "‚ö†Ô∏è Web application health check failed"
                docker compose logs --tail=10
              fi
            else
              echo "‚ùå No containers are running"
              docker compose logs --tail=20
              exit 1
            fi

  # Deploy to Public GitHub Pages
  deploy-to-public-repo:
    needs: build-static
    runs-on: ubuntu-latest
    if: always() && needs.build-static.result == 'success'
    steps:
      - name: Download static artifacts
        uses: actions/download-artifact@v4
        with:
          name: static-site
          path: ./out

      - name: Check if static artifacts exist
        id: check-artifacts
        run: |
          if [ -d "./out" ] && [ "$(ls -A ./out)" ]; then
            echo "artifacts_exist=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Static artifacts found, proceeding with deployment"
          else
            echo "artifacts_exist=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No static artifacts found, skipping GitHub Pages deployment"
            echo "‚ÑπÔ∏è  This is expected when static export fails due to dynamic API routes"
          fi

      - name: Deploy to GitHub Pages
        if: steps.check-artifacts.outputs.artifacts_exist == 'true'
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.PAGES_DEPLOY_TOKEN }}
          external_repository: ${{ secrets.PUBLIC_REPO_NAME }}
          publish_dir: ./out
          publish_branch: gh-pages
          commit_message: |
            Deploy static site from ${{ github.repository }}@${{ github.sha }}
            
            Source: ${{ github.event.head_commit.message }}
            Actor: ${{ github.actor }}
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      - name: Static export summary
        if: always()
        run: |
          if [ "${{ steps.check-artifacts.outputs.artifacts_exist }}" = "true" ]; then
            echo "‚úÖ Static export succeeded - deployed to GitHub Pages"
          else
            echo "‚ö†Ô∏è Static export failed - using Docker deployment only"
            echo "‚ÑπÔ∏è  This is the expected behavior due to dynamic API routes"
            echo "‚ÑπÔ∏è  Docker deployment provides full functionality including APIs"
          fi

  # Notify results
  notify:
    needs: [build-docker, build-static, deploy-server, deploy-to-public-repo]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          echo "## Deployment Results"
          echo "- Docker Build: ${{ needs.build-docker.result || 'skipped' }}"
          echo "- Static Build: ${{ needs.build-static.result || 'skipped' }}"
          echo "- Server Deploy: ${{ needs.deploy-server.result || 'skipped' }}"
          echo "- Pages Deploy: ${{ needs.deploy-to-public-repo.result || 'skipped' }}"
          
          if [ "${{ needs.deploy-server.result }}" = "success" ]; then
            echo "üåê Main site: https://adventhymnals.org"
          fi
          
          if [ "${{ needs.deploy-to-public-repo.result }}" = "success" ]; then
            echo "üìÑ GitHub Pages: https://${{ secrets.PUBLIC_REPO_NAME }}.github.io"
          fi