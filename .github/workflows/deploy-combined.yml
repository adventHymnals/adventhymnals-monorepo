name: Build and Deploy to GitHub Pages and Docker

on:
  push:
    branches: [ master, main ]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - 'data/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'turbo.json'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: adventhymnals/advent-hymnals-web

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: "combined-deploy"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout and setup
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm turbo build --filter=@advent-hymnals/web^...

      # Build static export for GitHub Pages
      - name: Build static export
        continue-on-error: true
        run: |
          cd apps/web
          pnpm build
        env:
          NEXT_OUTPUT: export
          NEXT_DISTDIR: out
          
      # Check if build output exists (verifies build succeeded despite errors)
      - name: Verify build output
        run: |
          if [ ! -d "apps/web/out" ]; then
            echo "Build failed - no output directory found"
            exit 1
          fi
          echo "Build output verified - found $(find apps/web/out -name "*.html" | wc -l) HTML files"

      # Deploy to GitHub Pages (only on master push)
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: adventhymnals/adventhymnals.github.io
          deploy_key: ${{ secrets.DEPLOY_SSH_KEY }}
          publish_dir: ./apps/web/out
          publish_branch: master
          cname: adventhymnals.org

      # Docker setup and build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      # Build Docker image with API support (for search functionality)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy Docker container to server
  deploy-docker:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        port: ${{ secrets.DEPLOY_PORT || 22 }}
        script: |
          # Create deployment directory
          mkdir -p /opt/advent-hymnals
          cd /opt/advent-hymnals
          
          # Create docker-compose.yml if it doesn't exist
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            advent-hymnals-web:
              image: ghcr.io/adventhymnals/advent-hymnals-web:latest
              ports:
                - "80:3000"
              environment:
                - NODE_ENV=production
                - NEXT_PUBLIC_GA_ID=${NEXT_PUBLIC_GA_ID}
                - SITE_URL=${SITE_URL:-https://adventhymnals.org}
                - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-https://adventhymnals.org}
                - GOOGLE_VERIFICATION=${GOOGLE_VERIFICATION}
                - YANDEX_VERIFICATION=${YANDEX_VERIFICATION}
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOF
          fi
          
          # Create .env file with secrets
          cat > .env << EOF
          NEXT_PUBLIC_GA_ID=${{ secrets.NEXT_PUBLIC_GA_ID }}
          SITE_URL=https://adventhymnals.org
          NEXT_PUBLIC_SITE_URL=https://adventhymnals.org
          GOOGLE_VERIFICATION=${{ secrets.GOOGLE_VERIFICATION }}
          YANDEX_VERIFICATION=${{ secrets.YANDEX_VERIFICATION }}
          EOF
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest image
          docker pull ghcr.io/adventhymnals/advent-hymnals-web:latest
          
          # Stop and remove old containers
          docker compose down || true
          
          # Start new containers
          docker compose up -d
          
          # Clean up old images
          docker image prune -f