name: Build and Package Advent Hymnals

on:
  push:
    branches: [ master, main ]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - 'data/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'turbo.json'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: adventhymnals/advent-hymnals-web

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: "build-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      # Checkout and setup
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm turbo build --filter=@advent-hymnals/web^...

      # Static export disabled due to API route conflicts - using Docker deployment only
      - name: Skip static export
        run: |
          echo "Skipping static export build due to dynamic API route conflicts."
          echo "Using Docker deployment with full API functionality instead."

      # Build for Docker (standalone mode)
      - name: Build for Docker deployment
        run: |
          cd apps/web
          # Clean previous build
          rm -rf .next
          pnpm build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      # Minimal cleanup to free disk space for Docker build
      - name: Clean up for Docker build
        run: |
          echo "=== Disk usage before cleanup ==="
          df -h
          
          # Clean package caches but keep build artifacts
          pnpm store prune
          npm cache clean --force
          
          # Remove unnecessary files but keep build artifacts
          find . -name "*.log" -delete 2>/dev/null || true
          find . -name "*.tmp" -delete 2>/dev/null || true
          
          echo "=== Disk usage after cleanup ==="
          df -h
          
      # Docker setup and build
      - name: Check available disk space
        run: |
          echo "=== Disk Usage Before Docker Build ==="
          df -h
          echo "=== Available Space ==="
          df -h / | awk 'NR==2{printf "%.1f%% used (%s available)\n", $5, $4}'
          echo "=== Memory Usage ==="
          free -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      # Build Docker image using pre-built artifacts
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile.optimized
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
          platforms: linux/amd64
          no-cache: false
          pull: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DOCKER_BUILDKIT=1

  # Trigger deployment workflow on successful build
  trigger-deployment:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    steps:
      - name: Trigger deployment workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: deploy
          client-payload: |
            {
              "image_digest": "${{ needs.build.outputs.image-digest }}",
              "image_tags": "${{ needs.build.outputs.image-tags }}",
              "sha": "${{ github.sha }}",
              "ref": "${{ github.ref }}"
            }