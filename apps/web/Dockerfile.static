# Multi-stage build for static Next.js export served with nginx
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@8.15.0

# Copy package.json and pnpm-lock.yaml
COPY package.json pnpm-lock.yaml* ./
COPY pnpm-workspace.yaml ./

# Copy package.json files from workspace packages
COPY packages/shared/package.json ./packages/shared/
COPY packages/hymnal-processor/package.json ./packages/hymnal-processor/
COPY packages/metadata-indexer/package.json ./packages/metadata-indexer/
COPY packages/ocr-corrector/package.json ./packages/ocr-corrector/
COPY apps/web/package.json ./apps/web/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Build stage
FROM base AS builder
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@8.15.0

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/packages ./packages
COPY --from=deps /app/apps/web/node_modules ./apps/web/node_modules

# Copy source code
COPY . .

# Set environment variables for build
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production

# Build shared packages first
RUN pnpm --filter @advent-hymnals/shared build

# Build the Next.js static export
RUN cd apps/web && NEXT_OUTPUT=export NEXT_DISTDIR=out NEXT_PUBLIC_API_BASE_URL=https://adventhymnals.org pnpm build

# Production stage with nginx
FROM nginx:alpine AS runner

# Copy static files from builder
COPY --from=builder /app/apps/web/out /usr/share/nginx/html

# Create custom nginx configuration for SPA routing
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Handle static assets with long cache times
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }

    # Handle all routes - serve index.html for SPA routing
    location / {
        try_files $uri $uri/ /index.html;
        
        # Short cache for HTML files
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public";
        }
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF

# Create nginx user and set permissions
RUN addgroup -g 101 -S nginx && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Switch to nginx user
USER nginx

EXPOSE 80

# Use nginx in foreground mode
CMD ["nginx", "-g", "daemon off;"]